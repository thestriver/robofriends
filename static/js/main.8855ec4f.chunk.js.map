{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","cardComponent","map","user","index","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAmBeA,EAhBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAExB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,6BACC,4BAAKC,GACL,2BAAIC,MCQOI,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACtC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOX,GAAIO,EAAOI,GAAOX,GAAIC,KAAMM,EAAOI,GAAOV,KAAMC,MAAOK,EAAOI,GAAOT,WAE/F,OACC,6BACEM,ICSWK,EAhBG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKZ,UAAU,OACd,2BACAA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCEI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCkBEC,E,YAnBd,WAAYN,GAAQ,IAAD,8BAClB,4CAAMA,KACDO,MAAQ,CACZC,UAAW,GAHM,E,+EAODC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAI3B,OAAIG,KAAKJ,MAAMC,SACP,uDAEDG,KAAKX,MAAMK,a,GAhBOQ,aCwDZC,G,kBAjDd,aAAc,IAAD,8BACZ,+CAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAb1C,EAAKX,MAAQ,CACZpB,OAAS,GACTO,YAAa,IAJF,E,iFASQ,IAAD,OACnByB,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAACzB,OAAQoC,S,+BASnH,IAAD,OACFC,EAAiBb,KAAKJ,MAAMpB,OAAOsC,QAAO,SAAAC,GAC/C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKrB,MAAMb,YAAYiC,kBAKjE,OAAiC,IAA7BhB,KAAKJ,MAAMpB,OAAO0C,OACd,uCAIP,yBAAK9C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,OAAQqC,W,GArCNX,c,MCGEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.8855ec4f.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({id, name, email}) => {\n\t// const {id, name, email} = props;\n\treturn (\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tconst cardComponent = robots.map((user,index) => {\n\t\treturn <Card key={index} id={robots[index].id} name={robots[index].name} email={robots[index].email} />\n\t})\n\treturn (\n\t\t<div>\n\t\t\t{cardComponent}\n\t\t</div>\t\n\n\n\t);\n\n}\n\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={searchChange}\n\t\t\t/>\n\n\t\t</div>\n\t\n\t);\n\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError : false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError : true })\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oops. That is not good.</h1>\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react'\nimport CardList from '../components/CardList'\n// import { robots } from './robots'; not needed after we want to fetch from another website\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css';\n\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots : [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => {this.setState({robots: users})});\n\t\t\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\t}\n\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\n\t\t})\n\n\n\t\tif (this.state.robots.length === 0 ) {  //i.e if the fetch is taking quite a while to get data and robots array is still empty\n\t\t\treturn <h1>Loading</h1> \n\t\t}\n\t\telse {\t\t\t\t\t\t\t\t\t//else return out normal initial rendering. Just remove the if and else if robot data is local.\n\t\t\treturn (\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t\t}\n\n\t\t\n\t}\n\t\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\n// import CardList from './CardList';\nimport App from './containers/App';\n\nimport 'tachyons';\n\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}